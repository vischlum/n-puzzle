#!/usr/bin/env python3.9

"""
The program must be able to solve any given n-puzzle according to the goal shape
(default is in ascending order in a spiral pattern).
The puzzle can be given in a file or generated by the program itself.
"""

import argparse
import random
import sys
import time

from dataclass import Puzzle
from heuristics import select_heuristic
from parsing import parsing_main
from solvability import check_solvability
from a_star import solve
from visualiser import results_visualiser


def generate_grid(size: int, shape: str) -> Puzzle:
    """
    Generates a solvable puzzle if no file is given to the program
    """
    grid = list(range(size ** 2))

    while True:
        random.shuffle(grid)
        puzzle = Puzzle(size, tuple(grid), shape)
        if check_solvability(puzzle) is True:
            break

    return puzzle


def main() -> None:
    """
    Where the magic happens:
    1. Parse the command line arguments
    2. Parse/Generate the file
    3. Solve the puzzle

    `process_time()` only gives valid results for the difference between two calls,
    hence the two calls at the very beginning and the very end of the function
    """
    try:
        time_at_beginning = time.process_time()
        parser = argparse.ArgumentParser()
        file_or_size = parser.add_mutually_exclusive_group(required=True)
        file_or_size.add_argument(
            "-f", "--file", help="the .txt puzzle to be solved", type=open
        )
        file_or_size.add_argument(
            "-s",
            "--size",
            help="the size of the puzzle to be generated",
            type=int,
            choices=range(1, 8),
        )
        parser.add_argument(
            "--heuristic",
            type=str,
            help="the heuristic used to help solve the puzzle",
            choices=("uniform", "hamming", "manhattan", "linear"),
            default="manhattan",
        )
        parser.add_argument(
            "-g",
            "--greedy",
            help="make the search greedy (ignore path cost)",
            action="store_true",
        )
        parser.add_argument(
            "--shape",
            type=str,
            help="the shape of the goal",
            choices=("ascending", "descending", "spiral", "random"),
            default="spiral",
        )
        parser.add_argument(
            "-v", "--visualiser", help="enable the visualiser", action="store_true"
        )
        args = parser.parse_args()
    except OSError as exc:
        sys.exit(f"\033[31;1mError when parsing the command-line: {exc}\033[m")

    try:
        puzzle: Puzzle
        if args.file:
            with open(args.file.name, "r") as file:
                file_content = file.read()
            puzzle = parsing_main(file_content, args.shape)
        else:
            puzzle = generate_grid(args.size, args.shape)
        puzzle.heuristic = select_heuristic(args.heuristic)
        time_to_solve, solution = solve(puzzle, args.greedy)
        time_at_end = time.process_time()
        print(
            f"""Time to solve = \033[36;1m{round(time_to_solve, 3)
                }s\033[m | Total execution time = \033[36;1m{
                round(time_at_end - time_at_beginning, 3)}s\033[m"""
        )
        if args.visualiser:
            results_visualiser(
                puzzle.size, solution, args.heuristic, args.shape, args.greedy
            )
    except Exception as exc:  # pylint: disable=broad-except
        sys.exit(f"\033[31;1mError when processing the grid: {exc}\033[m")


if __name__ == "__main__":
    main()
